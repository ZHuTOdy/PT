// Generated by CoffeeScript 2.3.1
(function() {
  var $api, checkError, loadDict;

  window.$api = $api = function(url, data, callback) {
    var err, files, request;
    files = data.files;
    delete data.files;
    if (!callback) {
      callback = function() {};
    }
    try {
      request = {
        url: `${url}`,
        headers: {
          'Content-type': 'application/json;charset=UTF-8'
        },
        type: "post",
        dataType: "json",
        data: JSON.stringify(data),
        iframe: true,
        cache: false,
        success: function(data, textStatus, jqXHR) {
          return callback(data, textStatus, jqXHR);
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return callback({
            error: errorThrown
          }, textStatus, jqXHR);
        }
      };
      if (files) {
        request.files = files;
      }
      return $.ajax(request);
    } catch (error) {
      err = error;
      return console.log(err);
    }
  };

  window.checkError = checkError = function(res) {
    if (res.error) {
      alert(res.error);
      return true;
    }
    return false;
  };

  window.loadDict = loadDict = function(elemUI, key, type, callback) {
    return $api("/dict/list", {type}, function(res) {
      console.log("resresres:", res);
      if (checkError(res)) {
        return;
      }
      elemUI.$data[key] = (res != null ? res.items : void 0) || [];
      console.log("elemelemelem:", elemUI);
      if (callback != null) {
        return callback();
      }
    });
  };

  // 业务识别号类型
  window.initTable = function($elem, elemUI, key) {
    var pagination, table;
    table = {
      url: "",
      data: {},
      query: {},
      page: 1
    };
    table.findList = function(url, query, cb) {
      if (url) {
        table.url = url;
      }
      if (query) {
        table.query = query;
      }
      table.query.page = table.page - 1;
      table.query.pageSize = 10;
      return $api(table.url, table.query, function(res) {
        console.log("resresres:", res);
        if (checkError(res)) {
          return;
        }
        table.data = res;
        elemUI.$data[key] = res.items;
        console.log("tabletabletable:", res);
        pagination(table.data);
        if (cb != null) {
          return cb();
        }
      });
    };
    table.pageFunc = function(page) {
      var max;
      console.log("pagepagepage:", page);
      max = Math.ceil(table.data.total / table.data.pageSize);
      table.page = page;
      if (page > max) {
        // return if table.page == max
        table.page = max;
      }
      if (page <= 0) {
        table.page = 1;
      }
      console.log("pagepagepage:", table.page);
      // table.query.page = table.page - 1
      return table.refresh();
    };
    pagination = function(data) {
      var html;
      $elem.find(".el-pagination").remove();
      html = `<div class="el-pagination" style="float: right;"><span class="el-pagination__total">共 ${data.total} 条</span><button type="button" class="btn-prev">上一页</button><button type="button" class="btn-next">下一页</button><span class="el-pagination__jump">前往<div class="el-input el-pagination__editor is-in-pagination"><!----><input type="number" autocomplete="off" value="${table.page}" class="el-input__inner"><!----><!----><!----></div>页</span></div>`;
      $elem.append(html);
      $elem.find(".btn-prev").click(function() {
        return table.pageFunc(--table.page);
      });
      $elem.find(".btn-next").click(function() {
        return table.pageFunc(++table.page);
      });
      return $elem.find(".el-pagination").find("input").keydown(function(event) {
        var val;
        // console.log "inputinputinputinputinputinputinputinputinput",event.keyCode
        if (event.keyCode === 13) {
          val = $elem.find(".el-pagination").find("input").val();
          if (!/^\d+$/.test(val)) {
            return alert("请输入数字");
          }
          return table.pageFunc(val);
        }
      });
    };
    table.refresh = function(cb) {
      return table.findList("", null, cb);
    };
    return table;
  };

}).call(this);
